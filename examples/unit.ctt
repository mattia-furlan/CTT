Path : [A : U] A -> A -> U =
    [A : U][a0 : A][a1 : A][i : I] [(i = 0) -> a0 | (i = 1) -> a1] A ;

refl : [A : U][a : A] Path A a a = [A : U][a : A][i : I] a ;

const : [A:U]I -> U = [A:U][i:I]A ;

indSigma : [A:U][B:A->U][C:(<x:A>B x)->U]([a:A][b:B a]C (a,b)) -> [p:<x:A>B x] C p =
    [A:U][B:A->U][C:(<x:A>B x)->U][h:[a:A][b:B a]C((a,b))][p:<x:A>B x]
        h p.1 p.2;

recSigma : [A:U][B:U][C:A*B->U]([a:A][b:B]C (a,b)) -> [p:A*B] C p =
    [A:U][B:U][C:A*B->U][h:[a:A][b:B]C (a,b)] indSigma A (A->B) C h ;

funext : [A,B:U][f,g:A -> B] ([x:A] Path B (f x) (g x)) -> Path (A -> B) f g =
    [A,B:U][f,g:A -> B][p:[x:A] Path B (f x) (g x)][i:I][x:A] (p x i) ;

dfunext : [A:U][B:A -> U][f,g:[x:A] B x]([x:A] Path (B x) (f x) (g x)) -> Path ([x:A] B x) f g =
    [A:U][B:A -> U][f,g:[x:A] B x][p:[x:A] Path (B x) (f x) (g x)][i:I][x:A] (p x i) ;

transp : [F : I -> U] F 0 -> F 1 = [F : I -> U][a0 : F 0]
    comp F () 0 (I -> []) a0 1 ;

transp' : [F : I -> U][i0,i1:I] F i0 -> F i1 = [F : I -> U][i0,i1:I][a0 : F i0]
    comp F () i0 (I -> []) a0 i1 ;

transport : [B : U][P : B -> U][x : B][y : B][pB : Path B x y] P x -> P y = 
    [B : U][P : B -> U][x : B][y : B][pB : Path B x y][u : P x]
        transp ([i : I] P (pB i)) u ;

invFill : [A:U][a,b:A][p:Path A a b][i,j:I][j = 0 -> a | i = 0 -> p j | i = 1 -> a]A
 = [A:U][a,b:A][p:Path A a b][i,j:I]
   comp (const A) (i = 0 \/ i = 1) 0 ([j':I][i = 0 -> p j' | i = 1 -> a]) a j ;

inv : [A:U][a,b:A] Path A a b -> Path A b a = [A:U][a,b:A][p:Path A a b]
    [i:I] (comp (const A) (i = 0 \/ i = 1) 0 ([j:I][i = 0 -> p j | i = 1 -> a]) a 1) ;

ii : I ;

unit : U = [ii = ii -> Z]N ;

tt : unit = Z ;

unitInd : [C:unit -> U] C tt -> [x:unit] C x 
 = [C:unit -> U][p: C tt][x:unit] p ;

unitEq : [x:unit] Path unit tt x
 = [x:unit] unitInd ([y:unit] Path unit tt y) (refl unit tt) x ;


bool : U = unit + unit ;

false : bool = inl tt ;
true : bool = inr tt ;

boolInd : [C:bool -> U] C false -> C true -> [x:bool] C x 
 = [C:bool -> U][cf:C false][ct:C true][x:bool]
   split C ([u:unit] unitInd ([u':unit] C (inl u')) cf u) ([u:unit] unitInd ([u':unit] C (inr u')) ct u) x ;

boolRec : [C:U] C -> C -> bool -> C
 = [C:U][iff:C][ift:C][x:bool] boolInd (bool -> C) iff ift x ;

If : [C:U] bool -> C -> C -> C = [C:U][x:bool][ift:C][iff:C] boolRec C iff ift x ;

not : bool -> bool
 = [b:bool] If bool b false true ;

and : bool -> bool -> bool
 = [b1,b2:bool] If bool b1 b2 false ;

or : bool -> bool -> bool
 = [b1,b2:bool] not (and (not b1) (not b2)) ;

nat_eq : N -> N -> bool
 = [m:N] ind (N -> N -> bool) ([n:N] ind (N -> bool) true (N -> bool -> false) n)
     ([m':N][IH:N -> bool][n:N] ind (N -> bool) false ([n':N] bool -> IH n') n) m;

nat_neq : N -> N -> bool
 = [m,n:N] not (nat_eq m n) ;

nat_leq : N -> N -> bool
 = [m:N] ind (N -> N -> bool) (N -> true)
     ([m':N][IH:N -> bool][n:N] ind (N -> bool) false ([n':N] bool -> IH n') n) m;

nat_le : N -> N -> bool
 = [m,n:N] and (nat_leq m n) (nat_neq m n) ;

empty : U = [X:U] X ;

emptyRec : [C:empty -> U][z:empty] C z 
 = [C:empty -> U][z:empty] z (C z) ;

finiteSet : N -> U
 = [n : N] ind (N -> U) empty ([m:N][mFin:U] mFin + unit) n ;


Fin : N -> U
 = [n:N] <k:N> If U (nat_leq k n) unit empty ;

zero_one : Fin (S Z) = Z,tt ;
zero_two : Fin (S (S Z)) = Z,tt ;
one_two  : Fin (S (S Z)) = S Z,tt ;

fcomp : [A,B,C:U][f:B -> C][g:A -> B] A -> C
 = [A,B,C:U][f:B -> C][g:A -> B][a:A] f (g a) ;

id : [A:U] A -> A = [A:U][x:A] x ;

isEquiv : [A,B:U] (A -> B) -> U
 = [A,B:U][f:A -> B] (<g:B -> A> Path (B -> B) (fcomp B A B f g) (id B)) * (<h:B -> A> Path (A -> A) (fcomp A B A h f) (id A)) ;

equiv : U -> U -> U
 = [A,B:U]<f:A -> B> isEquiv A B f;

Lemma_2_4_12a : [A:U] isEquiv A A (id A)
 = [A:U] (id A,refl (A -> A) (id A)),(id A,refl (A -> A) (id A)) ;



prod : U -> U -> U = [A,B:U][x:bool] boolRec U A B x ;
couple : [A,B:U] A -> B -> prod A B = [A,B:U][a:A][b:B]
    boolInd ([x:bool] boolRec U A B x) a b ;
pi1 : [A,B:U] prod A B -> A = [A,B:U][p : prod A B] p false ;
pi2 : [A,B:U] prod A B -> B = [A,B:U][p : prod A B] p true ;

prodEta : [A,B:U][p:prod A B] Path (prod A B) (couple A B (pi1 A B p) (pi2 A B p)) p
 = [A,B:U][p:prod A B] dfunext bool ([x:bool] boolRec U A B x) (couple A B (pi1 A B p) (pi2 A B p)) p
 (boolInd
        ([y:bool] Path (boolRec U A B y) (couple A B (pi1 A B p) (pi2 A B p) y) (p y))
        (refl A (p false))
        (refl B (p true))
    ) ;

prodInd : [A,B:U][C: prod A B -> U]([a:A][b:B] C (couple A B a b)) -> [p:prod A B] C p 
 = [A,B:U][C: prod A B -> U][f:[a:A][b:B] C (couple A B a b)][p:prod A B]
    transport (prod A B) C (couple A B (pi1 A B p) (pi2 A B p)) p (prodEta A B p) (f (pi1 A B p) (pi2 A B p)) ;

to : [A,B:U] A * B -> prod A B = [A,B:U][p:A * B]
    couple A B (p.1) (p.2) ;

from : [A,B:U] prod A B -> A * B = [A,B:U][p:prod A B]
    (pi1 A B p , pi2 A B p) ;

-- to A B (from A B (couple A B a b)) == to A B (pi1 A B (couple A B a b),pi2 A B (couple A B a b)) == to A B (a,b) == couple A B a b

to_from' : [A,B:U][p:prod A B] Path (prod A B) (to A B (from A B p)) p 
 = [A,B:U] prodInd A B ([p':prod A B] Path (prod A B) (to A B (from A B p')) p')
   ([a:A][b:B] refl (prod A B) (couple A B a b)) ;

to_from : [A,B:U] Path (prod A B -> prod A B)
    (fcomp (prod A B) (A * B) (prod A B) (to A B) (from A B)) (id (prod A B))
 = [A,B:U] funext (prod A B) (prod A B)
   (fcomp (prod A B) (A * B) (prod A B) (to A B) (from A B)) (id (prod A B))
   (to_from' A B) ;

from_to' : [A,B:U][p:A*B] Path (A*B) (from A B (to A B p)) p
 = [A,B:U] recSigma A B ([p':A*B] Path (A*B) (from A B (to A B p')) p')
   ([a:A][b:B] refl (A*B) (a,b)) ;

from_to : [A,B:U] Path (A * B -> A * B)
    (fcomp (A*B) (prod A B) (A*B) (from A B) (to A B)) (id (A*B))
 = [A,B:U] funext (A * B) (A * B)
   (fcomp (A*B) (prod A B) (A*B) (from A B) (to A B)) (id (A*B))
   (from_to' A B) ;

prodEquiv : [A,B:U] equiv (A * B) (prod A B)
 = [A,B:U] (to A B,((from A B,to_from A B),(from A B,from_to A B))) ;



A : U ;
a : A ;
b : A ;
p : Path A a b ;

p' : [j:I][j=0 -> a][j = 1 -> b]A = p ;
